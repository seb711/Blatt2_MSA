MODULE _VARS
	VAR
		V_Bahnuebergangssteuerung : {L_Idle, L_BUSecuring, L_AP_Success, L_TrainIsPassing, L_OpenSchrankeBack, L_BUSecured};
		V_closeTrigger : {L_True, L_False};
		V_openTrigger : {L_True, L_False};
		V_SchrankenSensor : {L_Offen, L_Geschlossen, L_InTransit};
		V_BUFunk : {L_EPMsg, L_APMsg, L_DelayAck, L_Start, L_AckSent};
		V_ZugSensor : {L_Blocked, L_Free};
		V_Bremse : {L_Offen, L_Geschlossen};
		V_Bremsverzoegerung : {5};
		V_BremseFest : {L_True, L_False};
		V_Geschwindigkeit : 0..10;
		V_Zugfunkmodul : {L_IDLE, L_EP_SENT, L_EP_DELAY, L_AP_DELAY, L_AP_SENT, L_AP_ACK, L_AP_WAIT};
		V_HodometerGeschwindigkeit : {L_Measuring};
		V_GemesseneGeschwindigkeit : 0..15;
		V_HodometerPosition : {L_Measuring};
		V_GemessenePosition : 0..105;
		V_Position : 0..100;
		V_Schranke : {L_Offen, L_Geschlossen, L_Opening, L_Closing};
		V_pos : 0..10;
		V_UmgebungZug : {L_Moving};
		V_APAck : {L_True, L_False};
		V_ZugFunkSender : {L_EPSenden, L_APSenden};
		V_time : 0..60;
		V_Zugsteuerung : {L_NO_INTERUPT, L_EP_PASSED, L_AP_PASSED, L_BU_PASSING, L_EMER_STOP};
	TRANS
		next(V_Bremsverzoegerung) = V_Bremsverzoegerung;
MODULE _P_Bahnuebergangssteuerung(v)
	INIT
		(v.V_Bahnuebergangssteuerung = L_Idle) & (TRUE)
	TRANS
		 ( v.V_Bahnuebergangssteuerung = L_Idle & next(v.V_Bahnuebergangssteuerung) = L_BUSecuring & (v.V_BUFunk = L_EPMsg) & (next(v.V_closeTrigger) = L_True & next(v.V_openTrigger) = L_False))  |
		 ( v.V_Bahnuebergangssteuerung = L_BUSecuring & next(v.V_Bahnuebergangssteuerung) = L_BUSecured & (v.V_SchrankenSensor = L_Geschlossen) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_AP_Success & next(v.V_Bahnuebergangssteuerung) = L_TrainIsPassing & (v.V_ZugSensor = L_Blocked) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_TrainIsPassing & next(v.V_Bahnuebergangssteuerung) = L_OpenSchrankeBack & (v.V_ZugSensor = L_Free) & (next(v.V_closeTrigger) = L_False & next(v.V_openTrigger) = L_True))  |
		 ( v.V_Bahnuebergangssteuerung = L_OpenSchrankeBack & next(v.V_Bahnuebergangssteuerung) = L_Idle & (v.V_SchrankenSensor = L_Offen) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_BUSecured & next(v.V_Bahnuebergangssteuerung) = L_AP_Success & (v.V_BUFunk = L_APMsg) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_Idle & next(v.V_Bahnuebergangssteuerung) = L_Idle & !(v.V_BUFunk = L_EPMsg) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_BUSecuring & next(v.V_Bahnuebergangssteuerung) = L_BUSecuring & !(v.V_SchrankenSensor = L_Geschlossen) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_AP_Success & next(v.V_Bahnuebergangssteuerung) = L_AP_Success & !(v.V_ZugSensor = L_Blocked) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_TrainIsPassing & next(v.V_Bahnuebergangssteuerung) = L_TrainIsPassing & !(v.V_ZugSensor = L_Free) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_OpenSchrankeBack & next(v.V_Bahnuebergangssteuerung) = L_OpenSchrankeBack & !(v.V_SchrankenSensor = L_Offen) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger))  |
		 ( v.V_Bahnuebergangssteuerung = L_BUSecured & next(v.V_Bahnuebergangssteuerung) = L_BUSecured & !(v.V_BUFunk = L_APMsg) & (next(v.V_closeTrigger) = v.V_closeTrigger & next(v.V_openTrigger) = v.V_openTrigger));
MODULE _P_Bremse(v)
	INIT
		(v.V_Bremse = L_Offen) & (TRUE)
	TRANS
		 ( v.V_Bremse = L_Offen & next(v.V_Bremse) = L_Geschlossen & (v.V_BremseFest = L_True) & (TRUE))  |
		 ( v.V_Bremse = L_Geschlossen & next(v.V_Bremse) = L_Offen & ((v.V_BremseFest = L_False) | (v.V_Geschwindigkeit = 0)) & (TRUE))  |
		 ( v.V_Bremse = L_Geschlossen & next(v.V_Bremse) = L_Geschlossen & (v.V_BremseFest = L_True) & (TRUE))  |
		 ( v.V_Bremse = L_Offen & next(v.V_Bremse) = L_Offen & !(v.V_BremseFest = L_True) & (TRUE))  |
		 ( v.V_Bremse = L_Geschlossen & next(v.V_Bremse) = L_Geschlossen & (!((v.V_BremseFest = L_False) | (v.V_Geschwindigkeit = 0)) & !(v.V_BremseFest = L_True)) & (TRUE));
MODULE _P_BUFunk(v)
	INIT
		(v.V_BUFunk = L_Start) & (TRUE)
	TRANS
		 ( v.V_BUFunk = L_EPMsg & next(v.V_BUFunk) = L_APMsg & (v.V_Zugfunkmodul = L_AP_SENT) & (TRUE))  |
		 ( v.V_BUFunk = L_APMsg & next(v.V_BUFunk) = L_DelayAck & (v.V_Bahnuebergangssteuerung = L_AP_Success) & (TRUE))  |
		 ( v.V_BUFunk = L_DelayAck & next(v.V_BUFunk) = L_AckSent & TRUE & (TRUE))  |
		 ( v.V_BUFunk = L_Start & next(v.V_BUFunk) = L_EPMsg & (v.V_Zugfunkmodul = L_EP_SENT) & (TRUE))  |
		 ( v.V_BUFunk = L_EPMsg & next(v.V_BUFunk) = L_EPMsg & !(v.V_Zugfunkmodul = L_AP_SENT) & (TRUE))  |
		 ( v.V_BUFunk = L_APMsg & next(v.V_BUFunk) = L_APMsg & !(v.V_Bahnuebergangssteuerung = L_AP_Success) & (TRUE))  |
		 ( v.V_BUFunk = L_Start & next(v.V_BUFunk) = L_Start & !(v.V_Zugfunkmodul = L_EP_SENT) & (TRUE))  |
		 ( v.V_BUFunk = L_AckSent & next(v.V_BUFunk) = L_AckSent & TRUE & (TRUE));
MODULE _P_HodometerGeschwindigkeit(v)
	INIT
		(v.V_HodometerGeschwindigkeit = L_Measuring) & ((v.V_GemesseneGeschwindigkeit = v.V_Geschwindigkeit))
	TRANS
		 ( v.V_HodometerGeschwindigkeit = L_Measuring & next(v.V_HodometerGeschwindigkeit) = L_Measuring & ((v.V_Geschwindigkeit >= 0) & (v.V_Geschwindigkeit <= 15)) & (next(v.V_GemesseneGeschwindigkeit) = v.V_Geschwindigkeit))  |
		 ( v.V_HodometerGeschwindigkeit = L_Measuring & next(v.V_HodometerGeschwindigkeit) = L_Measuring & !((v.V_Geschwindigkeit >= 0) & (v.V_Geschwindigkeit <= 15)) & (next(v.V_GemesseneGeschwindigkeit) = v.V_GemesseneGeschwindigkeit));
MODULE _P_HodometerPosition(v)
	INIT
		(v.V_HodometerPosition = L_Measuring) & ((v.V_Position = v.V_GemessenePosition))
	TRANS
		 ( v.V_HodometerPosition = L_Measuring & next(v.V_HodometerPosition) = L_Measuring & ((v.V_Position >= 0) & (v.V_Position <= 105)) & (next(v.V_GemessenePosition) = v.V_Position))  |
		 ( v.V_HodometerPosition = L_Measuring & next(v.V_HodometerPosition) = L_Measuring & !((v.V_Position >= 0) & (v.V_Position <= 105)) & (next(v.V_GemessenePosition) = v.V_GemessenePosition));
MODULE _P_Schranke(v)
	INIT
		(v.V_Schranke = L_Offen) & (TRUE)
	TRANS
		 ( v.V_Schranke = L_Offen & next(v.V_Schranke) = L_Closing & (v.V_closeTrigger = L_True) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Geschlossen & next(v.V_Schranke) = L_Opening & (v.V_openTrigger = L_True) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Opening & next(v.V_Schranke) = L_Opening & ((v.V_pos > 0) & (v.V_pos > 0)) & (next(v.V_pos) = (v.V_pos - 1)))  |
		 ( v.V_Schranke = L_Opening & next(v.V_Schranke) = L_Offen & (v.V_pos = 0) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Closing & next(v.V_Schranke) = L_Closing & ((v.V_pos < 10) & (v.V_pos < 10)) & (next(v.V_pos) = (v.V_pos + 1)))  |
		 ( v.V_Schranke = L_Closing & next(v.V_Schranke) = L_Geschlossen & (v.V_pos = 10) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Offen & next(v.V_Schranke) = L_Offen & !(v.V_closeTrigger = L_True) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Geschlossen & next(v.V_Schranke) = L_Geschlossen & !(v.V_openTrigger = L_True) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Opening & next(v.V_Schranke) = L_Opening & (!((v.V_pos > 0) & (v.V_pos > 0)) & !(v.V_pos = 0)) & (next(v.V_pos) = v.V_pos))  |
		 ( v.V_Schranke = L_Closing & next(v.V_Schranke) = L_Closing & (!((v.V_pos < 10) & (v.V_pos < 10)) & !(v.V_pos = 10)) & (next(v.V_pos) = v.V_pos));
MODULE _P_SchrankenSensor(v)
	INIT
		(v.V_SchrankenSensor = L_InTransit) & (TRUE)
	TRANS
		 ( v.V_SchrankenSensor = L_Offen & next(v.V_SchrankenSensor) = L_InTransit & (v.V_Schranke = L_Opening) & (TRUE))  |
		 ( v.V_SchrankenSensor = L_Geschlossen & next(v.V_SchrankenSensor) = L_InTransit & (v.V_Schranke = L_Closing) & (TRUE))  |
		 ( v.V_SchrankenSensor = L_InTransit & next(v.V_SchrankenSensor) = L_Geschlossen & (v.V_Schranke = L_Geschlossen) & (TRUE))  |
		 ( v.V_SchrankenSensor = L_InTransit & next(v.V_SchrankenSensor) = L_Offen & (v.V_Schranke = L_Offen) & (TRUE))  |
		 ( v.V_SchrankenSensor = L_Offen & next(v.V_SchrankenSensor) = L_Offen & !(v.V_Schranke = L_Opening) & (TRUE))  |
		 ( v.V_SchrankenSensor = L_Geschlossen & next(v.V_SchrankenSensor) = L_Geschlossen & !(v.V_Schranke = L_Closing) & (TRUE))  |
		 ( v.V_SchrankenSensor = L_InTransit & next(v.V_SchrankenSensor) = L_InTransit & (!(v.V_Schranke = L_Geschlossen) & !(v.V_Schranke = L_Offen)) & (TRUE));
MODULE _P_UmgebungZug(v)
	INIT
		(v.V_UmgebungZug = L_Moving) & (((v.V_Position = 0) & (v.V_Geschwindigkeit = 10)))
	TRANS
		 ( v.V_UmgebungZug = L_Moving & next(v.V_UmgebungZug) = L_Moving & ((v.V_Bremse = L_Geschlossen) & ((((v.V_Position + v.V_Geschwindigkeit) >= 0) & ((v.V_Position + v.V_Geschwindigkeit) <= 100)) & (((v.V_Geschwindigkeit - v.V_Bremsverzoegerung) >= 0) & ((v.V_Geschwindigkeit - v.V_Bremsverzoegerung) <= 10)))) & (next(v.V_Geschwindigkeit) = (v.V_Geschwindigkeit - v.V_Bremsverzoegerung) & next(v.V_Position) = (v.V_Position + v.V_Geschwindigkeit)))  |
		 ( v.V_UmgebungZug = L_Moving & next(v.V_UmgebungZug) = L_Moving & ((v.V_Bremse = L_Offen) & ((((v.V_Position + v.V_Geschwindigkeit) >= 0) & ((v.V_Position + v.V_Geschwindigkeit) <= 100)) & ((v.V_Geschwindigkeit >= 0) & (v.V_Geschwindigkeit <= 10)))) & (next(v.V_Geschwindigkeit) = v.V_Geschwindigkeit & next(v.V_Position) = (v.V_Position + v.V_Geschwindigkeit)))  |
		 ( v.V_UmgebungZug = L_Moving & next(v.V_UmgebungZug) = L_Moving & (!((v.V_Bremse = L_Geschlossen) & ((((v.V_Position + v.V_Geschwindigkeit) >= 0) & ((v.V_Position + v.V_Geschwindigkeit) <= 100)) & (((v.V_Geschwindigkeit - v.V_Bremsverzoegerung) >= 0) & ((v.V_Geschwindigkeit - v.V_Bremsverzoegerung) <= 10)))) & !((v.V_Bremse = L_Offen) & ((((v.V_Position + v.V_Geschwindigkeit) >= 0) & ((v.V_Position + v.V_Geschwindigkeit) <= 100)) & ((v.V_Geschwindigkeit >= 0) & (v.V_Geschwindigkeit <= 10))))) & (next(v.V_Geschwindigkeit) = v.V_Geschwindigkeit & next(v.V_Position) = v.V_Position));
MODULE _P_Zugfunkmodul(v)
	INIT
		(v.V_Zugfunkmodul = L_IDLE) & (TRUE)
	TRANS
		 ( v.V_Zugfunkmodul = L_IDLE & next(v.V_Zugfunkmodul) = L_EP_DELAY & (v.V_ZugFunkSender = L_EPSenden) & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_EP_SENT & next(v.V_Zugfunkmodul) = L_AP_WAIT & TRUE & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_EP_DELAY & next(v.V_Zugfunkmodul) = L_EP_SENT & TRUE & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_AP_DELAY & next(v.V_Zugfunkmodul) = L_AP_SENT & TRUE & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_AP_SENT & next(v.V_Zugfunkmodul) = L_AP_ACK & (v.V_BUFunk = L_AckSent) & (next(v.V_APAck) = L_True))  |
		 ( v.V_Zugfunkmodul = L_AP_ACK & next(v.V_Zugfunkmodul) = L_IDLE & TRUE & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_AP_WAIT & next(v.V_Zugfunkmodul) = L_AP_DELAY & (v.V_ZugFunkSender = L_APSenden) & (next(v.V_APAck) = L_False))  |
		 ( v.V_Zugfunkmodul = L_IDLE & next(v.V_Zugfunkmodul) = L_IDLE & !(v.V_ZugFunkSender = L_EPSenden) & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_AP_SENT & next(v.V_Zugfunkmodul) = L_AP_SENT & !(v.V_BUFunk = L_AckSent) & (next(v.V_APAck) = v.V_APAck))  |
		 ( v.V_Zugfunkmodul = L_AP_WAIT & next(v.V_Zugfunkmodul) = L_AP_WAIT & !(v.V_ZugFunkSender = L_APSenden) & (next(v.V_APAck) = v.V_APAck));
MODULE _P_ZugSensor(v)
	INIT
		(v.V_ZugSensor = L_Free) & (TRUE)
	TRANS
		 ( v.V_ZugSensor = L_Blocked & next(v.V_ZugSensor) = L_Free & (((v.V_GemessenePosition + 5) < 0) | (v.V_time > 20)) & (next(v.V_time) = v.V_time))  |
		 ( v.V_ZugSensor = L_Blocked & next(v.V_ZugSensor) = L_Blocked & (((v.V_time + 1) >= 0) & ((v.V_time + 1) <= 60)) & (next(v.V_time) = (v.V_time + 1)))  |
		 ( v.V_ZugSensor = L_Free & next(v.V_ZugSensor) = L_Blocked & ((v.V_GemessenePosition < 0) & ((0 >= 0) & (0 <= 60))) & (next(v.V_time) = 0))  |
		 ( v.V_ZugSensor = L_Blocked & next(v.V_ZugSensor) = L_Blocked & (!(((v.V_GemessenePosition + 5) < 0) | (v.V_time > 20)) & !(((v.V_time + 1) >= 0) & ((v.V_time + 1) <= 60))) & (next(v.V_time) = v.V_time))  |
		 ( v.V_ZugSensor = L_Free & next(v.V_ZugSensor) = L_Free & !((v.V_GemessenePosition < 0) & ((0 >= 0) & (0 <= 60))) & (next(v.V_time) = v.V_time));
MODULE _P_Zugsteuerung(v)
	INIT
		(v.V_Zugsteuerung = L_NO_INTERUPT) & (TRUE)
	TRANS
		 ( v.V_Zugsteuerung = L_NO_INTERUPT & next(v.V_Zugsteuerung) = L_EP_PASSED & (v.V_GemessenePosition > ((((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit))) - (v.V_Geschwindigkeit * (5 + 2)))) & (next(v.V_ZugFunkSender) = L_EPSenden & next(v.V_BremseFest) = v.V_BremseFest))  |
		 ( v.V_Zugsteuerung = L_EP_PASSED & next(v.V_Zugsteuerung) = L_AP_PASSED & (v.V_GemessenePosition > (((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit)))) & (next(v.V_ZugFunkSender) = L_APSenden & next(v.V_BremseFest) = v.V_BremseFest))  |
		 ( v.V_Zugsteuerung = L_AP_PASSED & next(v.V_Zugsteuerung) = L_EMER_STOP & ((v.V_GemessenePosition > ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))) & (v.V_APAck = L_False)) & (next(v.V_BremseFest) = L_True & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_AP_PASSED & next(v.V_Zugsteuerung) = L_BU_PASSING & ((v.V_GemessenePosition > ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))) & (v.V_APAck = L_True)) & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_BU_PASSING & next(v.V_Zugsteuerung) = L_NO_INTERUPT & (v.V_GemessenePosition > 100) & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_NO_INTERUPT & next(v.V_Zugsteuerung) = L_NO_INTERUPT & !(v.V_GemessenePosition > ((((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit))) - (v.V_Geschwindigkeit * (5 + 2)))) & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_EP_PASSED & next(v.V_Zugsteuerung) = L_EP_PASSED & !(v.V_GemessenePosition > (((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit)))) & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_AP_PASSED & next(v.V_Zugsteuerung) = L_AP_PASSED & (!((v.V_GemessenePosition > ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))) & (v.V_APAck = L_False)) & !((v.V_GemessenePosition > ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))) & (v.V_APAck = L_True))) & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_BU_PASSING & next(v.V_Zugsteuerung) = L_BU_PASSING & !(v.V_GemessenePosition > 100) & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender))  |
		 ( v.V_Zugsteuerung = L_EMER_STOP & next(v.V_Zugsteuerung) = L_EMER_STOP & TRUE & (next(v.V_BremseFest) = v.V_BremseFest & next(v.V_ZugFunkSender) = v.V_ZugFunkSender));
MODULE main
	VAR
		v : _VARS();
		p_Bahnuebergangssteuerung : _P_Bahnuebergangssteuerung(v);
		p_Bremse : _P_Bremse(v);
		p_BUFunk : _P_BUFunk(v);
		p_HodometerGeschwindigkeit : _P_HodometerGeschwindigkeit(v);
		p_HodometerPosition : _P_HodometerPosition(v);
		p_Schranke : _P_Schranke(v);
		p_SchrankenSensor : _P_SchrankenSensor(v);
		p_UmgebungZug : _P_UmgebungZug(v);
		p_Zugfunkmodul : _P_Zugfunkmodul(v);
		p_ZugSensor : _P_ZugSensor(v);
		p_Zugsteuerung : _P_Zugsteuerung(v);



LTLSPEC (F v.V_Zugsteuerung = L_EMER_STOP ) -> (F v.V_Geschwindigkeit = 0)
LTLSPEC (F v.V_Zugsteuerung = L_AP_PASSED) -> (F v.V_Schranke = L_Geschlossen)
LTLSPEC G ((v.V_Zugsteuerung = L_BU_PASSING) -> (v.V_Schranke = L_Geschlossen))
LTLSPEC G(v.V_ZugSensor = L_Blocked -> v.V_Schranke = L_Geschlossen | v.V_time > 20)
LTLSPEC G( (v.V_Bremse != L_Geschlossen) U (v.V_Position >= ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))))