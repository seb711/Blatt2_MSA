<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>
<#=  TransformToNuSMV() #>

DEFINE NoFailures := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_ZugSensorFailure = L_No
);

DEFINE PASSING_TIMEOUT := 5;

DEFINE CONSTANT_Z := 1;
DEFINE CONSTANT_T := 5;
DEFINE CONSTANT_C := 2;

DEFINE BU_POINT := 170;
DEFINE GP_POINT := 150;

DEFINE BEP_POINT := GP_POINT - CONSTANT_Z - (v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung) - 30;
DEFINE AP_POINT := BEP_POINT - 4 * (CONSTANT_C * v.V_Geschwindigkeit);
DEFINE EP_POINT := AP_POINT - v.V_Geschwindigkeit*(CONSTANT_T + CONSTANT_C);



LTLSPEC (G NoFailures) -> ((F v.V_Zugsteuerung = L_EMER_STOP ) -> (F v.V_Geschwindigkeit = 0))
LTLSPEC (G NoFailures) -> ((F v.V_Zugsteuerung = L_AP_PASSED) -> (F v.V_SchrankeClosedSensor = L_Triggered))
LTLSPEC (G NoFailures) -> (G ((v.V_Zugsteuerung = L_BU_PASSING) -> (F v.V_SchrankeOpenSensor = L_Triggered)))
LTLSPEC (G NoFailures) -> (G ((v.V_Zugfunkmodul = L_AP_ACK) -> (F v.V_SchrankeClosedSensor = L_Triggered)))
LTLSPEC (G NoFailures) -> (G ((v.V_pos = EP_POINT) -> F (F v.V_Schranke = L_Closing)))
LTLSPEC (G NoFailures) -> (G(v.V_ZugSensor = L_Triggered -> F (v.V_ZugSensor = L_NoSignal | v.V_time >= PASSING_TIMEOUT)))
LTLSPEC (G NoFailures) -> (G((v.V_Position >= BEP_POINT & v.V_Position < BU_POINT & v.V_SchrankeClosedSensor != L_Triggered -> F (v.V_Bremse = L_Geschlossen))))
LTLSPEC (G NoFailures) -> (G ( (v.V_Zugsteuerung = L_BU_PASSING) -> (F v.V_Schranke = L_Opening) ))
LTLSPEC (G NoFailures) -> ( G ( (v.V_BUFunk = L_AckSent) -> (F v.V_Position > AP_POINT ) ))
LTLSPEC (G NoFailures) -> (G((v.V_Position >= BEP_POINT) & v.V_APAck = L_False) -> (F v.V_Bremse = L_Geschlossen))
LTLSPEC (G NoFailures) -> (G((v.V_Bremse = L_Geschlossen) -> (F (v.V_Position <= GP_POINT & v.V_Geschwindigkeit = 0))))
LTLSPEC (G NoFailures) -> ( G((v.V_BUFunk = L_AckSent) -> (X v.V_APAck = L_True)))

--- PLAUSIBILITÄT

--- IF BRAKE FAILS TRAIN IS ALWAYS MOVING
DEFINE BrakeFailure := (
	v.V_BremseFailure = L_Yes &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_No
);
LTLSPEC (G BrakeFailure) -> (G v.V_Geschwindigkeit > 0)

--- IF HODOMETERFAILURE ALSO EP_PASSED NEVER CHANGES
DEFINE HodometerFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_Yes &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_No
);
LTLSPEC (G HodometerFailure) -> (G v.V_Zugsteuerung = L_NO_INTERUPT)

--- IF ZugfznkmodulFailte BUFUNK NEVER CHANGES
DEFINE ZugsteuerungFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_Yes &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_No
);

LTLSPEC (G ZugsteuerungFailure) -> (G v.V_BUFunk = L_Start)

--- IF SteuerungFAILURE ALSO EP_PASSED NEVER CHANGES
DEFINE SteuerungFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_Yes &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_No
);
LTLSPEC (G SteuerungFailure) -> (G v.V_Zugsteuerung = L_NO_INTERUPT)

--- IF BahnuebergangssteuerungFailure Schranke never closes
DEFINE BahnuebergangssteuerungFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_Yes &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_No
);
LTLSPEC (G BahnuebergangssteuerungFailure) -> !(G v.V_Schranke = L_Closing)

--- IF BUFunkFailure Train EMERGENCY
DEFINE BUFunkFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_Yes &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_No
);
LTLSPEC (G BUFunkFailure) -> (F v.V_Zugsteuerung = L_EMER_STOP)

--- IF SchrankeFailure Train EMERGENCY
DEFINE SchrankeFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_Yes &
	v.V_ZugSensorFailure = L_No
);
LTLSPEC (G SchrankeFailure) -> (F v.V_Zugsteuerung = L_EMER_STOP)

--- IF ZugSensorFailure Schranke never opens 
DEFINE ZugSensorFailure := (
	v.V_BremseFailure = L_No &
	v.V_HodometerFailure = L_No &
	v.V_ZugfunkmodulFailure = L_No &
	v.V_ZugsteuerungFailure = L_No &
	v.V_BahnuebergangssteuerungFailure = L_No &
	v.V_SchrankeClosedSensorFailure = L_No &
	v.V_SchrankeOpenSensorFailure = L_No &
	v.V_BUFunkFailure = L_No &
	v.V_SchrankeFailure = L_No &
	v.V_ZugSensorFailure = L_Yes
);
LTLSPEC (G ZugSensorFailure) -> !(G v.V_Schranke = L_Opening)

