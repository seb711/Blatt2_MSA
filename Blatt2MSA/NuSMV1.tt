<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>
<#=  TransformToNuSMV() #>
LTLSPEC (F v.V_Zugsteuerung = L_EMER_STOP ) -> (F v.V_Geschwindigkeit = 0)
LTLSPEC (F v.V_Zugsteuerung = L_AP_PASSED) -> (F v.V_Schranke = L_Geschlossen)
LTLSPEC G ((v.V_Zugsteuerung = L_BU_PASSING) -> (v.V_Schranke = L_Geschlossen))
LTLSPEC G ((v.V_Zugfunkmodul = L_AP_ACK) -> (v.V_Schranke = L_Geschlossen))
LTLSPEC G ((v.V_pos = 10) -> F ( v.V_Schranke = L_Geschlossen ))
LTLSPEC G(v.V_ZugSensor = L_Blocked -> v.V_Schranke = L_Geschlossen | v.V_time > 20)
LTLSPEC G((v.V_Position <= ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))) & v.V_Schranke != L_Geschlossen -> F (v.V_Bremse = L_Geschlossen))
LTLSPEC G ( (v.V_Zugsteuerung = L_BU_PASSING) -> (F v.V_Schranke = L_Opening) )
LTLSPEC  G ( (v.V_BUFunk = L_AckSent) -> (F v.V_Position > 55 ) )
LTLSPEC G (v.V_BUFunk != L_AckSent U v.V_Schranke = L_Geschlossen)
LTLSPEC G((v.V_Position > ((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung)))) & v.V_APAck = L_False) -> (F v.V_Bremse = L_Geschlossen)
LTLSPEC G((v.V_Bremse = L_Geschlossen) -> (F (v.V_Position <= 100 & v.V_Geschwindigkeit = 0)))
LTLSPEC  G((v.V_BUFunk = L_AckSent) -> (X v.V_APAck = L_True))
LTLSPEC  F (  F v.V_Position >= (((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit))) & v.V_Schranke != L_Geschlossen )
LTLSPEC  (((((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit))) - ((((55 - 1) - ((v.V_Geschwindigkeit * v.V_Geschwindigkeit) / (2 * v.V_Bremsverzoegerung))) - (2 * (2 * v.V_Geschwindigkeit))) - (v.V_Geschwindigkeit * (5 + 2)))) * 1 < (10 -0) * v.V_Geschwindigkeit)